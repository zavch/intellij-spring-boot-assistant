import com.vladsch.flexmark.html.HtmlRenderer
import com.vladsch.flexmark.parser.Parser

buildscript {
    repositories {
        maven {
            url 'https://maven.aliyun.com/repository/public/'
        }
        mavenCentral()
    }
    dependencies {
        classpath 'com.vladsch.flexmark:flexmark:0.64.0'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'org.jetbrains.intellij' version '1.10.0'
}

group = 'dev.eltonsandre.intellij'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"

repositories {
    maven {
        url 'https://maven.aliyun.com/repository/public/'
    }
    mavenLocal()
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    testCompileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {

    ['annotationProcessor', 'compileOnly', 'testAnnotationProcessor', 'testCompileOnly']
            .each { conf -> add(conf, 'org.projectlombok:lombok:1.18.22') }

    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'com.miguelfonseca.completely:completely-core:0.9.0'

    testImplementation platform('org.junit:junit-bom:5.8.2'),
            'org.junit.jupiter:junit-jupiter',
            'org.junit.jupiter:junit-jupiter-api',
            'org.mockito:mockito-core:4.3.1'
}

clean.doFirst {
    delete 'build', 'out'
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    type.set('IC')
    version.set('2021.3.2')
    downloadSources.set(true)
    pluginName.set(project.name)
    plugins.set(['java', 'properties', 'yaml', 'maven', 'gradle'])
    updateSinceUntilBuild.set(true)
}

publishPlugin {
    token.set(System.getenv('JETBRAINS_PLUGIN_TOKEN'))
    channels.set(['eap', 'nightly', 'default'])
}

patchPluginXml {
    sinceBuild.set('203')
    untilBuild.set('')
    pluginDescription.set(provider { readmeXmlAsHtml() })
    changeNotes.set(provider { changeLogAsHtml() })
}

wrapper() {
    gradleVersion = '7.3'
    distributionUrl = distributionUrl.replace('bin', 'all')
}

String readmeXmlAsHtml() {
    final String readmeContent = new File(rootProject.uri('README.md')).text
    // since these images needs to shown from within intellij, lest put absolute urls so that the images & changelog will be visible
            .replaceAll("help\\.gif", "https://raw.githubusercontent.com/eltonsandre/intellij-spring-assistant/${version}/help.gif")
            .replaceAll("CHANGELOG.md", "https://github.com/eltonsandre/intellij-spring-assistant/blob/${version}/CHANGELOG.md")

    final var readmeDocument = Parser.builder().build().parse(readmeContent)
    HtmlRenderer.builder().build().render(readmeDocument)
}

String changeLogAsHtml() {
    var parser = Parser.builder().build()
    var renderer = HtmlRenderer.builder().build()
    var changeLogDocument = parser.parse(file(rootProject.uri('CHANGELOG.md')).text)
    renderer.render(changeLogDocument)
}
